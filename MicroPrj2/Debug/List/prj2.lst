
AVRASM ver. 2.1.30  C:\cvavr\BIN\MicroPrj2\Debug\List\prj2.asm Tue Jan 23 21:05:40 2024

C:\cvavr\BIN\MicroPrj2\Debug\List\prj2.asm(1088): warning: Register r5 already defined by the .DEF directive
C:\cvavr\BIN\MicroPrj2\Debug\List\prj2.asm(1089): warning: Register r4 already defined by the .DEF directive
C:\cvavr\BIN\MicroPrj2\Debug\List\prj2.asm(1090): warning: Register r6 already defined by the .DEF directive
C:\cvavr\BIN\MicroPrj2\Debug\List\prj2.asm(1091): warning: Register r7 already defined by the .DEF directive
C:\cvavr\BIN\MicroPrj2\Debug\List\prj2.asm(1092): warning: Register r8 already defined by the .DEF directive
C:\cvavr\BIN\MicroPrj2\Debug\List\prj2.asm(1093): warning: Register r9 already defined by the .DEF directive
C:\cvavr\BIN\MicroPrj2\Debug\List\prj2.asm(1094): warning: Register r11 already defined by the .DEF directive
C:\cvavr\BIN\MicroPrj2\Debug\List\prj2.asm(1095): warning: Register r10 already defined by the .DEF directive
C:\cvavr\BIN\MicroPrj2\Debug\List\prj2.asm(1096): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _xPosition=R5
                 	.DEF _correctAnswers=R4
                 	.DEF _step=R6
                 	.DEF _step_msb=R7
                 	.DEF _i=R8
                 	.DEF _i_msb=R9
                 	.DEF __lcd_x=R11
                 	.DEF __lcd_y=R10
                 	.DEF __lcd_maxx=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0063 	JMP  __RESET
000002 940c 0090 	JMP  _ext_int0_isr
000004 940c 0000 	JMP  0x00
000006 940c 00a7 	JMP  _ext_int2_isr
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _step1_val:
00002a 0301
00002b 0602
00002c 0c04
00002d 0908      	.DB  0x1,0x3,0x2,0x6,0x4,0xC,0x8,0x9
                 _step2_val:
00002e 0809
00002f 040c
000030 0206
000031 0103      	.DB  0x9,0x8,0xC,0x4,0x6,0x2,0x3,0x1
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000032 0000
000033 0000      	.DB  0x0,0x0,0x0,0x0
000034 0000      	.DB  0x0,0x0
                 
                 _0x0:
000035 6146
000036 6574
000037 656d
000038 4d20      	.DB  0x46,0x61,0x74,0x65,0x6D,0x65,0x20,0x4D
000039 736f
00003a 7661
00003b 6e69
00003c 646a      	.DB  0x6F,0x73,0x61,0x76,0x69,0x6E,0x6A,0x64
00003d 4100
00003e 6572
00003f 7920
000040 756f      	.DB  0x0,0x41,0x72,0x65,0x20,0x79,0x6F,0x75
000041 7220
000042 6165
000043 7964
000044 003f      	.DB  0x20,0x72,0x65,0x61,0x64,0x79,0x3F,0x0
000045 0033
000046 0032
000047 0031
000048 0058      	.DB  0x33,0x0,0x32,0x0,0x31,0x0,0x58,0x0
                 _0x2020003:
000049 c080      	.DB  0x80,0xC0
                 _0x2040060:
C:\cvavr\BIN\MicroPrj2\Debug\List\prj2.asm(1146): warning: .cseg .db misalignment - padding zero byte
00004a 0001      	.DB  0x1
                 _0x2040000:
00004b 4e2d
00004c 4e41
00004d 4900
00004e 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\cvavr\BIN\MicroPrj2\Debug\List\prj2.asm(1149): warning: .cseg .db misalignment - padding zero byte
00004f 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000050 0006      	.DW  0x06
000051 0004      	.DW  0x04
000052 0064      	.DW  __REG_VARS*2
                 
000053 0011      	.DW  0x11
000054 0260      	.DW  _0xF
000055 006a      	.DW  _0x0*2
                 
000056 000f      	.DW  0x0F
000057 0271      	.DW  _0xF+17
000058 007b      	.DW  _0x0*2+17
                 
000059 0002      	.DW  0x02
00005a 0280      	.DW  _0xF+32
00005b 0090      	.DW  _0x0*2+38
                 
00005c 0002      	.DW  0x02
00005d 0282      	.DW  __base_y_G101
00005e 0092      	.DW  _0x2020003*2
                 
00005f 0001      	.DW  0x01
000060 0286      	.DW  __seed_G102
000061 0094      	.DW  _0x2040060*2
                 
                 _0xFFFFFFFF:
000062 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000063 94f8      	CLI
000064 27ee      	CLR  R30
000065 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000066 e0f1      	LDI  R31,1
000067 bffb      	OUT  GICR,R31
000068 bfeb      	OUT  GICR,R30
000069 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00006a e08d      	LDI  R24,(14-2)+1
00006b e0a2      	LDI  R26,2
00006c 27bb      	CLR  R27
                 __CLEAR_REG:
00006d 93ed      	ST   X+,R30
00006e 958a      	DEC  R24
00006f f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000070 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000071 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000072 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000073 93ed      	ST   X+,R30
000074 9701      	SBIW R24,1
000075 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000076 eae0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000077 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000078 9185      	LPM  R24,Z+
000079 9195      	LPM  R25,Z+
00007a 9700      	SBIW R24,0
00007b f061      	BREQ __GLOBAL_INI_END
00007c 91a5      	LPM  R26,Z+
00007d 91b5      	LPM  R27,Z+
00007e 9005      	LPM  R0,Z+
00007f 9015      	LPM  R1,Z+
000080 01bf      	MOVW R22,R30
000081 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000082 9005      	LPM  R0,Z+
000083 920d      	ST   X+,R0
000084 9701      	SBIW R24,1
000085 f7e1      	BRNE __GLOBAL_INI_LOOP
000086 01fb      	MOVW R30,R22
000087 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000088 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000089 bfed      	OUT  SPL,R30
00008a e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00008b bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00008c e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00008d e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00008e 940c 00c3 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;
                 ;
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <string.h>
                 ;#include <mega32.h>
                 ;#include <delay.h>
                 ;#include <lcd.h>
                 ;#include <stdlib.h>
                 ;
                 ;
                 ;#asm
                   .equ __lcd_port = 0x1B;
                 ; 0000 000D #endasm
                 ;
                 ;// Define step sequences for two stepper motor phases
                 ;flash unsigned char step1_val[]={0x01 ,0x03, 0x02, 0x06, 0x04,0x0c,0x08 ,0x09};
                 ;flash unsigned char step2_val[]={0x09,0x08 ,0x0c, 0x04, 0x06, 0x02 ,0x03,0x01};
                 ;
                 ;unsigned char xPosition = 0;
                 ;unsigned char correctAnswers = 0;
                 ;
                 ;int step=0 , i=0;
                 ;
                 ;interrupt [EXT_INT0] void ext_int0_isr(void) {
                 ; 0000 0018 interrupt [2] void ext_int0_isr(void) {
                 
                 	.CSEG
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
000090 920a      	ST   -Y,R0
000091 93ea      	ST   -Y,R30
000092 93fa      	ST   -Y,R31
000093 b7ef      	IN   R30,SREG
000094 93ea      	ST   -Y,R30
                 ; 0000 0019     if (PIND.2 == 0) // key pressed
000095 9982      	SBIC 0x10,2
000096 c00f      	RJMP _0x3
                 ; 0000 001A     {
                 ; 0000 001B         if (xPosition < 16) {  // Button pressed on the first row of the keypad
000097 e1e0      	LDI  R30,LOW(16)
000098 165e      	CP   R5,R30
000099 f448      	BRSH _0x4
                 ; 0000 001C             correctAnswers++;
00009a 9443      	INC  R4
                 ; 0000 001D             if (step > 0) {     // Decrease step if not already at the minimum
00009b 2400      	CLR  R0
00009c 1406      	CP   R0,R6
00009d 0407      	CPC  R0,R7
00009e f41c      	BRGE _0x5
                 ; 0000 001E                step -= 2;     // Decrement step to reverse direction of the stepper motor
00009f 01f3      	MOVW R30,R6
0000a0 9732      	SBIW R30,2
0000a1 013f      	MOVW R6,R30
                 ; 0000 001F 
                 ; 0000 0020             }
                 ; 0000 0021         }
                 _0x5:
                 ; 0000 0022 
                 ; 0000 0023         else{
0000a2 c003      	RJMP _0x6
                 _0x4:
                 ; 0000 0024           step++;
0000a3 01f3      	MOVW R30,R6
0000a4 9631      	ADIW R30,1
0000a5 013f      	MOVW R6,R30
                 ; 0000 0025         }
                 _0x6:
                 ; 0000 0026     }
                 ; 0000 0027 }
                 _0x3:
0000a6 c016      	RJMP _0x1F
                 ; .FEND
                 ;
                 ;interrupt [EXT_INT2] void ext_int2_isr(void) {
                 ; 0000 0029 interrupt [4] void ext_int2_isr(void) {
                 _ext_int2_isr:
                 ; .FSTART _ext_int2_isr
0000a7 920a      	ST   -Y,R0
0000a8 93ea      	ST   -Y,R30
0000a9 93fa      	ST   -Y,R31
0000aa b7ef      	IN   R30,SREG
0000ab 93ea      	ST   -Y,R30
                 ; 0000 002A     if (PINB.2 == 0) {
0000ac 99b2      	SBIC 0x16,2
0000ad c00f      	RJMP _0x7
                 ; 0000 002B         if (xPosition >= 16){  // Button pressed on the second row of the keypad
0000ae e1e0      	LDI  R30,LOW(16)
0000af 165e      	CP   R5,R30
0000b0 f048      	BRLO _0x8
                 ; 0000 002C             correctAnswers++;
0000b1 9443      	INC  R4
                 ; 0000 002D              if (step > 0) {  // Decrease step if not already at the minimum
0000b2 2400      	CLR  R0
0000b3 1406      	CP   R0,R6
0000b4 0407      	CPC  R0,R7
0000b5 f41c      	BRGE _0x9
                 ; 0000 002E                 step -= 2;
0000b6 01f3      	MOVW R30,R6
0000b7 9732      	SBIW R30,2
0000b8 013f      	MOVW R6,R30
                 ; 0000 002F 
                 ; 0000 0030             }
                 ; 0000 0031         }
                 _0x9:
                 ; 0000 0032           else{
0000b9 c003      	RJMP _0xA
                 _0x8:
                 ; 0000 0033           step++;   // Increment step to advance the stepper motor
0000ba 01f3      	MOVW R30,R6
0000bb 9631      	ADIW R30,1
0000bc 013f      	MOVW R6,R30
                 ; 0000 0034         }
                 _0xA:
                 ; 0000 0035     }
                 ; 0000 0036 }
                 _0x7:
                 _0x1F:
0000bd 91e9      	LD   R30,Y+
0000be bfef      	OUT  SREG,R30
0000bf 91f9      	LD   R31,Y+
0000c0 91e9      	LD   R30,Y+
0000c1 9009      	LD   R0,Y+
0000c2 9518      	RETI
                 ; .FEND
                 ;
                 ;
                 ;
                 ;void main(void)
                 ; 0000 003B {
                 _main:
                 ; .FSTART _main
                 ; 0000 003C DDRA=255;
0000c3 efef      	LDI  R30,LOW(255)
0000c4 bbea      	OUT  0x1A,R30
                 ; 0000 003D DDRC=0x0F;
0000c5 e0ef      	LDI  R30,LOW(15)
0000c6 bbe4      	OUT  0x14,R30
                 ; 0000 003E DDRD.2=0;
0000c7 988a      	CBI  0x11,2
                 ; 0000 003F DDRB.2=0;
0000c8 98ba      	CBI  0x17,2
                 ; 0000 0040 srand(42);
0000c9 e2aa      	LDI  R26,LOW(42)
0000ca e0b0      	LDI  R27,0
0000cb 940e 0242 	CALL _srand
                 ; 0000 0041 
                 ; 0000 0042 lcd_init(16);
0000cd e1a0      	LDI  R26,LOW(16)
0000ce 940e 020f 	CALL _lcd_init
                 ; 0000 0043 
                 ; 0000 0044  // Display initial messages on the LCD
                 ; 0000 0045   lcd_gotoxy(0, 0);
0000d0 e0e0      	LDI  R30,LOW(0)
0000d1 93ea      	ST   -Y,R30
0000d2 e0a0      	LDI  R26,LOW(0)
0000d3 940e 019f 	CALL _lcd_gotoxy
                 ; 0000 0046   lcd_puts("Fateme Mosavinjd");
                +
0000d5 e6a0     +LDI R26 , LOW ( _0xF + ( 0 ) )
0000d6 e0b2     +LDI R27 , HIGH ( _0xF + ( 0 ) )
                 	__POINTW2MN _0xF,0
0000d7 940e 0263 	CALL SUBOPT_0x0
                 ; 0000 0047   delay_ms(100);
                 ; 0000 0048   lcd_clear();
                 ; 0000 0049 
                 ; 0000 004A   lcd_gotoxy(0, 0);
0000d9 e0e0      	LDI  R30,LOW(0)
0000da 93ea      	ST   -Y,R30
0000db e0a0      	LDI  R26,LOW(0)
0000dc 940e 019f 	CALL _lcd_gotoxy
                 ; 0000 004B   lcd_puts("Are you ready?");
                +
0000de e7a1     +LDI R26 , LOW ( _0xF + ( 17 ) )
0000df e0b2     +LDI R27 , HIGH ( _0xF + ( 17 ) )
                 	__POINTW2MN _0xF,17
0000e0 940e 0263 	CALL SUBOPT_0x0
                 ; 0000 004C   delay_ms(100);
                 ; 0000 004D   lcd_clear();
                 ; 0000 004E 
                 ; 0000 004F 
                 ; 0000 0050   lcd_gotoxy(1, 1);
0000e2 940e 026b 	CALL SUBOPT_0x1
                 ; 0000 0051   lcd_putsf("3");
                +
0000e4 e8aa     +LDI R26 , LOW ( 2 * _0x0 + ( 32 ) )
0000e5 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 32 ) )
                 	__POINTW2FN _0x0,32
0000e6 940e 0270 	CALL SUBOPT_0x2
                 ; 0000 0052   delay_ms(100);
                 ; 0000 0053   lcd_clear();
                 ; 0000 0054 
                 ; 0000 0055 
                 ; 0000 0056   lcd_gotoxy(1, 1);
                 ; 0000 0057   lcd_putsf("2");
                +
0000e8 e8ac     +LDI R26 , LOW ( 2 * _0x0 + ( 34 ) )
0000e9 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 34 ) )
                 	__POINTW2FN _0x0,34
0000ea 940e 0270 	CALL SUBOPT_0x2
                 ; 0000 0058   delay_ms(100);
                 ; 0000 0059   lcd_clear();
                 ; 0000 005A 
                 ; 0000 005B 
                 ; 0000 005C   lcd_gotoxy(1, 1);
                 ; 0000 005D   lcd_putsf("1");
                +
0000ec e8ae     +LDI R26 , LOW ( 2 * _0x0 + ( 36 ) )
0000ed e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 36 ) )
                 	__POINTW2FN _0x0,36
0000ee 940e 01eb 	CALL _lcd_putsf
                 ; 0000 005E   delay_ms(100);
0000f0 e6a4      	LDI  R26,LOW(100)
0000f1 e0b0      	LDI  R27,0
0000f2 940e 028b 	CALL _delay_ms
                 ; 0000 005F   lcd_clear();
0000f4 940e 01af 	CALL _lcd_clear
                 ; 0000 0060 
                 ; 0000 0061 
                 ; 0000 0062   GICR |=1<<INT0;     // Enable external interrupt 0
0000f6 b7eb      	IN   R30,0x3B
0000f7 64e0      	ORI  R30,0x40
0000f8 bfeb      	OUT  0x3B,R30
                 ; 0000 0063   GICR |=1<<INT2;    // Enable external interrupt 2
0000f9 b7eb      	IN   R30,0x3B
0000fa 62e0      	ORI  R30,0x20
0000fb bfeb      	OUT  0x3B,R30
                 ; 0000 0064   #asm ("sei")       // Enable global interrupts
0000fc 9478      	sei
                 ; 0000 0065 
                 ; 0000 0066 
                 ; 0000 0067 
                 ; 0000 0068   while(1){
                 _0x10:
                 ; 0000 0069 
                 ; 0000 006A    unsigned char y = rand() % 2;  // Generate a random row (0 or 1)
                 ; 0000 006B    xPosition = rand() % 32;  // Generate a random column position (0 to 31)
0000fd 9721      	SBIW R28,1
                 ;	y -> Y+0
0000fe 940e 024c 	CALL _rand
000100 e0a1      	LDI  R26,LOW(1)
000101 e0b0      	LDI  R27,HIGH(1)
000102 940e 02be 	CALL __MANDW12
000104 83e8      	ST   Y,R30
000105 940e 024c 	CALL _rand
000107 e1af      	LDI  R26,LOW(31)
000108 e0b0      	LDI  R27,HIGH(31)
000109 940e 02be 	CALL __MANDW12
00010b 2e5e      	MOV  R5,R30
                 ; 0000 006C 
                 ; 0000 006D     // Determine the row based on the column position
                 ; 0000 006E    if (xPosition < 16) {
00010c e1e0      	LDI  R30,LOW(16)
00010d 165e      	CP   R5,R30
00010e f410      	BRSH _0x13
                 ; 0000 006F     y = 0;
00010f e0e0      	LDI  R30,LOW(0)
000110 c001      	RJMP _0x1E
                 ; 0000 0070     } else {
                 _0x13:
                 ; 0000 0071         y = 1;
000111 e0e1      	LDI  R30,LOW(1)
                 _0x1E:
000112 83e8      	ST   Y,R30
                 ; 0000 0072     }
                 ; 0000 0073 
                 ; 0000 0074    // Display "X" at the randomly generated position on the LCD
                 ; 0000 0075    lcd_gotoxy(xPosition % 16, y);
000113 2de5      	MOV  R30,R5
000114 e0f0      	LDI  R31,0
000115 e0af      	LDI  R26,LOW(15)
000116 e0b0      	LDI  R27,HIGH(15)
000117 940e 02be 	CALL __MANDW12
000119 93ea      	ST   -Y,R30
00011a 81a9      	LDD  R26,Y+1
00011b 940e 019f 	CALL _lcd_gotoxy
                 ; 0000 0076    lcd_puts("X");
                +
00011d e8a0     +LDI R26 , LOW ( _0xF + ( 32 ) )
00011e e0b2     +LDI R27 , HIGH ( _0xF + ( 32 ) )
                 	__POINTW2MN _0xF,32
00011f 940e 01dc 	CALL _lcd_puts
                 ; 0000 0077    delay_ms(110);
000121 e6ae      	LDI  R26,LOW(110)
000122 e0b0      	LDI  R27,0
000123 940e 028b 	CALL _delay_ms
                 ; 0000 0078    lcd_clear();
000125 940e 01af 	CALL _lcd_clear
                 ; 0000 0079 
                 ; 0000 007A     // Drive the stepper motor with the selected step sequence
                 ; 0000 007B     for(i=0; i<=25; i++) {
000127 2488      	CLR  R8
000128 2499      	CLR  R9
                 _0x16:
000129 e1e9      	LDI  R30,LOW(25)
00012a e0f0      	LDI  R31,HIGH(25)
00012b 15e8      	CP   R30,R8
00012c 05f9      	CPC  R31,R9
00012d f04c      	BRLT _0x17
                 ; 0000 007C         PORTC = step2_val[step];
00012e 01f3      	MOVW R30,R6
00012f 5ae4      	SUBI R30,LOW(-_step2_val*2)
000130 4fff      	SBCI R31,HIGH(-_step2_val*2)
000131 9004      	LPM  R0,Z
000132 ba05      	OUT  0x15,R0
                 ; 0000 007D     }
000133 01f4      	MOVW R30,R8
000134 9631      	ADIW R30,1
000135 014f      	MOVW R8,R30
000136 cff2      	RJMP _0x16
                 _0x17:
                 ; 0000 007E     delay_ms(1);
000137 e0a1      	LDI  R26,LOW(1)
000138 e0b0      	LDI  R27,0
000139 940e 028b 	CALL _delay_ms
                 ; 0000 007F 
                 ; 0000 0080 
                 ; 0000 0081     if (step == 0) {
00013b 2c06      	MOV  R0,R6
00013c 2807      	OR   R0,R7
00013d f4a1      	BRNE _0x18
                 ; 0000 0082         for(i=0; i<=25; i++) {
00013e 2488      	CLR  R8
00013f 2499      	CLR  R9
                 _0x1A:
000140 e1e9      	LDI  R30,LOW(25)
000141 e0f0      	LDI  R31,HIGH(25)
000142 15e8      	CP   R30,R8
000143 05f9      	CPC  R31,R9
000144 f04c      	BRLT _0x1B
                 ; 0000 0083             PORTC = step1_val[step];
000145 01f3      	MOVW R30,R6
000146 5aec      	SUBI R30,LOW(-_step1_val*2)
000147 4fff      	SBCI R31,HIGH(-_step1_val*2)
000148 9004      	LPM  R0,Z
000149 ba05      	OUT  0x15,R0
                 ; 0000 0084         }
00014a 01f4      	MOVW R30,R8
00014b 9631      	ADIW R30,1
00014c 014f      	MOVW R8,R30
00014d cff2      	RJMP _0x1A
                 _0x1B:
                 ; 0000 0085         delay_ms(1);
00014e e0a1      	LDI  R26,LOW(1)
00014f e0b0      	LDI  R27,0
000150 940e 028b 	CALL _delay_ms
                 ; 0000 0086     }
                 ; 0000 0087 
                 ; 0000 0088     step++;
                 _0x18:
000152 01f3      	MOVW R30,R6
000153 9631      	ADIW R30,1
000154 013f      	MOVW R6,R30
                 ; 0000 0089     if (step >= 7) {
000155 e0e7      	LDI  R30,LOW(7)
000156 e0f0      	LDI  R31,HIGH(7)
000157 166e      	CP   R6,R30
000158 067f      	CPC  R7,R31
000159 f014      	BRLT _0x1C
                 ; 0000 008A         step = 0;     // Reset step to 0 when it reaches the maximum value
00015a 2466      	CLR  R6
00015b 2477      	CLR  R7
                 ; 0000 008B     }
                 ; 0000 008C 
                 ; 0000 008D 
                 ; 0000 008E 
                 ; 0000 008F 
                 ; 0000 0090   }
                 _0x1C:
00015c 9621      	ADIW R28,1
00015d cf9f      	RJMP _0x10
                 ; 0000 0091 
                 ; 0000 0092 
                 ; 0000 0093 
                 ; 0000 0094 
                 ; 0000 0095 }
                 _0x1D:
00015e cfff      	RJMP _0x1D
                 ; .FEND
                 
                 	.DSEG
                 _0xF:
000260           	.BYTE 0x22
                 ;
                 ;
                 
                 	.CSEG
                     .equ __lcd_direction=__lcd_port-1
                     .equ __lcd_pin=__lcd_port-2
                     .equ __lcd_rs=0
                     .equ __lcd_rd=1
                     .equ __lcd_enable=2
                     .equ __lcd_busy_flag=7
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_delay_G101:
                 ; .FSTART __lcd_delay_G101
00015f e0ff          ldi   r31,15
                 __lcd_delay0:
000160 95fa          dec   r31
000161 f7f1          brne  __lcd_delay0
000162 9508      	RET
                 ; .FEND
                 __lcd_ready:
                 ; .FSTART __lcd_ready
000163 b3aa          in    r26,__lcd_direction
000164 70af          andi  r26,0xf                 ;set as input
000165 bbaa          out   __lcd_direction,r26
000166 9ad9          sbi   __lcd_port,__lcd_rd     ;RD=1
000167 98d8          cbi   __lcd_port,__lcd_rs     ;RS=0
                 __lcd_busy:
000168 dff6      	RCALL __lcd_delay_G101
000169 9ada          sbi   __lcd_port,__lcd_enable ;EN=1
00016a dff4      	RCALL __lcd_delay_G101
00016b b3a9          in    r26,__lcd_pin
00016c 98da          cbi   __lcd_port,__lcd_enable ;EN=0
00016d dff1      	RCALL __lcd_delay_G101
00016e 9ada          sbi   __lcd_port,__lcd_enable ;EN=1
00016f dfef      	RCALL __lcd_delay_G101
000170 98da          cbi   __lcd_port,__lcd_enable ;EN=0
000171 fda7          sbrc  r26,__lcd_busy_flag
000172 cff5          rjmp  __lcd_busy
000173 9508      	RET
                 ; .FEND
                 __lcd_write_nibble_G101:
                 ; .FSTART __lcd_write_nibble_G101
000174 7fa0          andi  r26,0xf0
000175 2bab          or    r26,r27
000176 bbab          out   __lcd_port,r26          ;write
000177 9ada          sbi   __lcd_port,__lcd_enable ;EN=1
000178 940e 015f 	CALL __lcd_delay_G101
00017a 98da          cbi   __lcd_port,__lcd_enable ;EN=0
00017b 940e 015f 	CALL __lcd_delay_G101
00017d 9508      	RET
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00017e 93aa      	ST   -Y,R26
00017f 98d9          cbi  __lcd_port,__lcd_rd 	  ;RD=0
000180 b3aa          in    r26,__lcd_direction
000181 6fa7          ori   r26,0xf0 | (1<<__lcd_rs) | (1<<__lcd_rd) | (1<<__lcd_enable) ;set as output
000182 bbaa          out   __lcd_direction,r26
000183 b3bb          in    r27,__lcd_port
000184 70bf          andi  r27,0xf
000185 81a8          ld    r26,y
000186 dfed      	RCALL __lcd_write_nibble_G101
000187 81a8          ld    r26,y
000188 95a2          swap  r26
000189 dfea      	RCALL __lcd_write_nibble_G101
00018a 9ad9          sbi   __lcd_port,__lcd_rd     ;RD=1
00018b 940c 0240 	JMP  _0x20A0002
                 ; .FEND
                 __lcd_read_nibble_G101:
                 ; .FSTART __lcd_read_nibble_G101
00018d 9ada          sbi   __lcd_port,__lcd_enable ;EN=1
00018e 940e 015f 	CALL __lcd_delay_G101
000190 b3e9          in    r30,__lcd_pin           ;read
000191 98da          cbi   __lcd_port,__lcd_enable ;EN=0
000192 940e 015f 	CALL __lcd_delay_G101
000194 7fe0          andi  r30,0xf0
000195 9508      	RET
                 ; .FEND
                 _lcd_read_byte0_G101:
                 ; .FSTART _lcd_read_byte0_G101
000196 940e 015f 	CALL __lcd_delay_G101
000198 dff4      	RCALL __lcd_read_nibble_G101
000199 2fae          mov   r26,r30
00019a dff2      	RCALL __lcd_read_nibble_G101
00019b 98d9          cbi   __lcd_port,__lcd_rd     ;RD=0
00019c 95e2          swap  r30
00019d 2bea          or    r30,r26
00019e 9508      	RET
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00019f 93aa      	ST   -Y,R26
0001a0 940e 0163 	CALL __lcd_ready
0001a2 81e8      	LD   R30,Y
0001a3 e0f0      	LDI  R31,0
0001a4 57ee      	SUBI R30,LOW(-__base_y_G101)
0001a5 4ffd      	SBCI R31,HIGH(-__base_y_G101)
0001a6 81e0      	LD   R30,Z
0001a7 81a9      	LDD  R26,Y+1
0001a8 0fae      	ADD  R26,R30
0001a9 940e 017e 	CALL __lcd_write_data
0001ab 80b9      	LDD  R11,Y+1
0001ac 80a8      	LDD  R10,Y+0
0001ad 940c 024a 	JMP  _0x20A0001
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0001af 940e 0163 	CALL __lcd_ready
0001b1 e0a2      	LDI  R26,LOW(2)
0001b2 940e 017e 	CALL __lcd_write_data
0001b4 940e 0163 	CALL __lcd_ready
0001b6 e0ac      	LDI  R26,LOW(12)
0001b7 940e 017e 	CALL __lcd_write_data
0001b9 940e 0163 	CALL __lcd_ready
0001bb e0a1      	LDI  R26,LOW(1)
0001bc 940e 017e 	CALL __lcd_write_data
0001be e0e0      	LDI  R30,LOW(0)
0001bf 2eae      	MOV  R10,R30
0001c0 2ebe      	MOV  R11,R30
0001c1 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0001c2 93aa      	ST   -Y,R26
0001c3 93ef          push r30
0001c4 93ff          push r31
0001c5 81a8          ld   r26,y
0001c6 9468          set
0001c7 30aa          cpi  r26,10
0001c8 f019          breq __lcd_putchar1
0001c9 94e8          clt
0001ca 14bd      	CP   R11,R13
0001cb f030      	BRLO _0x2020004
                 	__lcd_putchar1:
0001cc 94a3      	INC  R10
0001cd e0e0      	LDI  R30,LOW(0)
0001ce 93ea      	ST   -Y,R30
0001cf 2daa      	MOV  R26,R10
0001d0 dfce      	RCALL _lcd_gotoxy
0001d1 f036      	brts __lcd_putchar0
                 _0x2020004:
0001d2 94b3      	INC  R11
0001d3 df8f          rcall __lcd_ready
0001d4 9ad8          sbi  __lcd_port,__lcd_rs ;RS=1
0001d5 81a8      	LD   R26,Y
0001d6 940e 017e 	CALL __lcd_write_data
                 __lcd_putchar0:
0001d8 91ff          pop  r31
0001d9 91ef          pop  r30
0001da 940c 0240 	JMP  _0x20A0002
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0001dc 93ba      	ST   -Y,R27
0001dd 93aa      	ST   -Y,R26
0001de 931a      	ST   -Y,R17
                 _0x2020005:
0001df 81a9      	LDD  R26,Y+1
0001e0 81ba      	LDD  R27,Y+1+1
0001e1 91ed      	LD   R30,X+
0001e2 83a9      	STD  Y+1,R26
0001e3 83ba      	STD  Y+1+1,R27
0001e4 2f1e      	MOV  R17,R30
0001e5 30e0      	CPI  R30,0
0001e6 f019      	BREQ _0x2020007
0001e7 2fa1      	MOV  R26,R17
0001e8 dfd9      	RCALL _lcd_putchar
0001e9 cff5      	RJMP _0x2020005
                 _0x2020007:
0001ea c010      	RJMP _0x20A0003
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
0001eb 93ba      	ST   -Y,R27
0001ec 93aa      	ST   -Y,R26
0001ed 931a      	ST   -Y,R17
                 _0x2020008:
0001ee 81e9      	LDD  R30,Y+1
0001ef 81fa      	LDD  R31,Y+1+1
0001f0 9631      	ADIW R30,1
0001f1 83e9      	STD  Y+1,R30
0001f2 83fa      	STD  Y+1+1,R31
0001f3 9731      	SBIW R30,1
0001f4 91e4      	LPM  R30,Z
0001f5 2f1e      	MOV  R17,R30
0001f6 30e0      	CPI  R30,0
0001f7 f019      	BREQ _0x202000A
0001f8 2fa1      	MOV  R26,R17
0001f9 dfc8      	RCALL _lcd_putchar
0001fa cff3      	RJMP _0x2020008
                 _0x202000A:
                 _0x20A0003:
0001fb 8118      	LDD  R17,Y+0
0001fc 9623      	ADIW R28,3
0001fd 9508      	RET
                 ; .FEND
                 __long_delay_G101:
                 ; .FSTART __long_delay_G101
0001fe 27aa          clr   r26
0001ff 27bb          clr   r27
                 __long_delay0:
000200 9711          sbiw  r26,1         ;2 cycles
000201 f7f1          brne  __long_delay0 ;2 cycles
000202 9508      	RET
                 ; .FEND
                 __lcd_init_write_G101:
                 ; .FSTART __lcd_init_write_G101
000203 93aa      	ST   -Y,R26
000204 98d9          cbi  __lcd_port,__lcd_rd 	  ;RD=0
000205 b3aa          in    r26,__lcd_direction
000206 6fa7          ori   r26,0xf7                ;set as output
000207 bbaa          out   __lcd_direction,r26
000208 b3bb          in    r27,__lcd_port
000209 70bf          andi  r27,0xf
00020a 81a8          ld    r26,y
00020b 940e 0174 	CALL __lcd_write_nibble_G101
00020d 9ad9          sbi   __lcd_port,__lcd_rd     ;RD=1
00020e c031      	RJMP _0x20A0002
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00020f 93aa      	ST   -Y,R26
000210 98da          cbi   __lcd_port,__lcd_enable ;EN=0
000211 98d8          cbi   __lcd_port,__lcd_rs     ;RS=0
000212 80d8      	LDD  R13,Y+0
000213 81e8      	LD   R30,Y
000214 58e0      	SUBI R30,-LOW(128)
                +
000215 93e0 0284+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
000217 81e8      	LD   R30,Y
000218 54e0      	SUBI R30,-LOW(192)
                +
000219 93e0 0285+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
00021b 940e 0279 	CALL SUBOPT_0x3
00021d 940e 0279 	CALL SUBOPT_0x3
00021f 940e 0279 	CALL SUBOPT_0x3
000221 dfdc      	RCALL __long_delay_G101
000222 e2a0      	LDI  R26,LOW(32)
000223 dfdf      	RCALL __lcd_init_write_G101
000224 dfd9      	RCALL __long_delay_G101
000225 e2a8      	LDI  R26,LOW(40)
000226 940e 027e 	CALL SUBOPT_0x4
000228 e0a4      	LDI  R26,LOW(4)
000229 940e 027e 	CALL SUBOPT_0x4
00022b e8a5      	LDI  R26,LOW(133)
00022c 940e 027e 	CALL SUBOPT_0x4
00022e b3aa          in    r26,__lcd_direction
00022f 70af          andi  r26,0xf                 ;set as input
000230 bbaa          out   __lcd_direction,r26
000231 9ad9          sbi   __lcd_port,__lcd_rd     ;RD=1
000232 940e 0196 	CALL _lcd_read_byte0_G101
000234 30e5      	CPI  R30,LOW(0x5)
000235 f011      	BREQ _0x202000B
000236 e0e0      	LDI  R30,LOW(0)
000237 c008      	RJMP _0x20A0002
                 _0x202000B:
000238 940e 0163 	CALL __lcd_ready
00023a e0a6      	LDI  R26,LOW(6)
00023b 940e 017e 	CALL __lcd_write_data
00023d 940e 01af 	CALL _lcd_clear
00023f e0e1      	LDI  R30,LOW(1)
                 _0x20A0002:
000240 9621      	ADIW R28,1
000241 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 _srand:
                 ; .FSTART _srand
000242 93ba      	ST   -Y,R27
000243 93aa      	ST   -Y,R26
000244 81e8      	LD   R30,Y
000245 81f9      	LDD  R31,Y+1
000246 940e 0299 	CALL __CWD1
000248 940e 0282 	CALL SUBOPT_0x5
                 _0x20A0001:
00024a 9622      	ADIW R28,2
00024b 9508      	RET
                 ; .FEND
                 _rand:
                 ; .FSTART _rand
00024c 91e0 0286 	LDS  R30,__seed_G102
00024e 91f0 0287 	LDS  R31,__seed_G102+1
000250 9160 0288 	LDS  R22,__seed_G102+2
000252 9170 0289 	LDS  R23,__seed_G102+3
                +
000254 e6ad     +LDI R26 , LOW ( 0x41C64E6D )
000255 e4be     +LDI R27 , HIGH ( 0x41C64E6D )
000256 ec86     +LDI R24 , BYTE3 ( 0x41C64E6D )
000257 e491     +LDI R25 , BYTE4 ( 0x41C64E6D )
                 	__GETD2N 0x41C64E6D
000258 940e 029e 	CALL __MULD12U
                +
00025a 59ee     +SUBI R30 , LOW ( - 30562 )
00025b 48f8     +SBCI R31 , HIGH ( - 30562 )
00025c 4f6f     +SBCI R22 , BYTE3 ( - 30562 )
00025d 4f7f     +SBCI R23 , BYTE4 ( - 30562 )
                 	__ADDD1N 30562
00025e 940e 0282 	CALL SUBOPT_0x5
000260 01fb      	movw r30,r22
000261 77ff      	andi r31,0x7F
000262 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 __base_y_G101:
000282           	.BYTE 0x4
                 __seed_G102:
000286           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
000263 940e 01dc 	CALL _lcd_puts
000265 e6a4      	LDI  R26,LOW(100)
000266 e0b0      	LDI  R27,0
000267 940e 028b 	CALL _delay_ms
000269 940c 01af 	JMP  _lcd_clear
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
00026b e0e1      	LDI  R30,LOW(1)
00026c 93ea      	ST   -Y,R30
00026d e0a1      	LDI  R26,LOW(1)
00026e 940c 019f 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2:
000270 940e 01eb 	CALL _lcd_putsf
000272 e6a4      	LDI  R26,LOW(100)
000273 e0b0      	LDI  R27,0
000274 940e 028b 	CALL _delay_ms
000276 940e 01af 	CALL _lcd_clear
000278 cff2      	RJMP SUBOPT_0x1
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
000279 940e 01fe 	CALL __long_delay_G101
00027b e3a0      	LDI  R26,LOW(48)
00027c 940c 0203 	JMP  __lcd_init_write_G101
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
00027e 940e 017e 	CALL __lcd_write_data
000280 940c 01fe 	JMP  __long_delay_G101
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5:
000282 93e0 0286 	STS  __seed_G102,R30
000284 93f0 0287 	STS  __seed_G102+1,R31
000286 9360 0288 	STS  __seed_G102+2,R22
000288 9370 0289 	STS  __seed_G102+3,R23
00028a 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
00028b 9610      	adiw r26,0
00028c f039      	breq __delay_ms1
                 __delay_ms0:
00028d 95a8      	wdr
                +
00028e ed80     +LDI R24 , LOW ( 0x7D0 )
00028f e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000290 9701     +SBIW R24 , 1
000291 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000292 9711      	sbiw r26,1
000293 f7c9      	brne __delay_ms0
                 __delay_ms1:
000294 9508      	ret
                 
                 __ANEGW1:
000295 95f1      	NEG  R31
000296 95e1      	NEG  R30
000297 40f0      	SBCI R31,0
000298 9508      	RET
                 
                 __CWD1:
000299 2f6f      	MOV  R22,R31
00029a 0f66      	ADD  R22,R22
00029b 0b66      	SBC  R22,R22
00029c 2f76      	MOV  R23,R22
00029d 9508      	RET
                 
                 __MULD12U:
00029e 9f7a      	MUL  R23,R26
00029f 2d70      	MOV  R23,R0
0002a0 9f6b      	MUL  R22,R27
0002a1 0d70      	ADD  R23,R0
0002a2 9ff8      	MUL  R31,R24
0002a3 0d70      	ADD  R23,R0
0002a4 9fe9      	MUL  R30,R25
0002a5 0d70      	ADD  R23,R0
0002a6 9f6a      	MUL  R22,R26
0002a7 2d60      	MOV  R22,R0
0002a8 0d71      	ADD  R23,R1
0002a9 9ffb      	MUL  R31,R27
0002aa 0d60      	ADD  R22,R0
0002ab 1d71      	ADC  R23,R1
0002ac 9fe8      	MUL  R30,R24
0002ad 0d60      	ADD  R22,R0
0002ae 1d71      	ADC  R23,R1
0002af 2788      	CLR  R24
0002b0 9ffa      	MUL  R31,R26
0002b1 2df0      	MOV  R31,R0
0002b2 0d61      	ADD  R22,R1
0002b3 1f78      	ADC  R23,R24
0002b4 9feb      	MUL  R30,R27
0002b5 0df0      	ADD  R31,R0
0002b6 1d61      	ADC  R22,R1
0002b7 1f78      	ADC  R23,R24
0002b8 9fea      	MUL  R30,R26
0002b9 2de0      	MOV  R30,R0
0002ba 0df1      	ADD  R31,R1
0002bb 1f68      	ADC  R22,R24
0002bc 1f78      	ADC  R23,R24
0002bd 9508      	RET
                 
                 __MANDW12:
0002be 94e8      	CLT
0002bf fff7      	SBRS R31,7
0002c0 c002      	RJMP __MANDW121
0002c1 dfd3      	RCALL __ANEGW1
0002c2 9468      	SET
                 __MANDW121:
0002c3 23ea      	AND  R30,R26
0002c4 23fb      	AND  R31,R27
0002c5 f40e      	BRTC __MANDW122
0002c6 dfce      	RCALL __ANEGW1
                 __MANDW122:
0002c7 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  29 r1 :   7 r2 :   0 r3 :   0 r4 :   2 r5 :   5 r6 :  17 r7 :   5 
r8 :   8 r9 :   4 r10:   4 r11:   4 r12:   0 r13:   2 r14:   0 r15:   0 
r16:   0 r17:   7 r18:   0 r19:   0 r20:   0 r21:   0 r22:  20 r23:  15 
r24:  17 r25:   5 r26:  84 r27:  34 r28:   6 r29:   1 r30: 130 r31:  39 
x  :   4 y  :  56 z  :  11 
Registers used: 25 out of 35 (71.4%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   7 add   :  11 
adiw  :  11 and   :   2 andi  :   7 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   6 
brge  :   2 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   2 
brlt  :   3 brmi  :   0 brne  :   8 brpl  :   0 brsh  :   2 brtc  :   1 
brts  :   1 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  59 
cbi   :  12 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  13 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   0 
cp    :   9 cpc   :   5 cpi   :   4 cpse  :   0 dec   :   2 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :  12 inc   :   4 jmp   :  29 ld    :  15 ldd   :  11 ldi   :  86 
lds   :   4 lpm   :  13 lsl   :   0 lsr   :   0 mov   :  17 movw  :  20 
mul   :  10 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   3 
ori   :   4 out   :  18 pop   :   2 push  :   2 rcall :  17 ret   :  17 
reti  :   1 rjmp  :  19 rol   :   0 ror   :   0 sbc   :   1 sbci  :   7 
sbi   :   9 sbic  :   2 sbis  :   0 sbiw  :  10 sbr   :   0 sbrc  :   1 
sbrs  :   1 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  31 std   :   4 sts   :   6 sub   :   0 subi  :   6 swap  :   2 
tst   :   0 wdr   :   1 
Instructions used: 58 out of 116 (50.0%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000590   1310    114   1424   32768   4.3%
[.dseg] 0x000060 0x00028a      0     42     42    2048   2.1%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 11 warnings
